{"version":3,"sources":["Components/ITManPlayer.js","Components/Player.jsx","App.js","serviceWorker.js","index.js"],"names":["ITManPlayer","props","player","React","createRef","state","video_url","src","className","data-setup","ref","this","prevProps","prevState","setState","console","log","video","sources","videoNode","current","window","videojs","controls","fluid","eventON","Object","keys","forEach","item","on","dispose","Component","Player","videoPlay","play","audioplayer","videoPause","pause","videoSeek","currentTime","volumechange","volume","muted","audio_url","loaded","fetchcount","fetchVideo","bind","video_path","match","params","ix","axios","get","then","res","div","document","createElement","innerHTML","data","links","querySelectorAll","i","length","innerURL","includes","clearInterval","interrvalId","clearTimeout","timeoutId","catch","err","videoFetchInterval","setInterval","videoFetchTimeout","setTimeout","alert","seeked","aud","type","App","basename","process","path","render","key","Boolean","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a015a6db.chunk.js","sourcesContent":["// ITManPlayer.js\nimport React, { Component } from \"react\";\n\nclass ITManPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.player = React.createRef();\n    this.state = {\n        video_url: this.props.src\n    }\n  }\n  \n  render() {\n    return (\n      <video\n        className=\"video-js vjs-big-play-centered\"\n        data-setup=\"{}\"\n        ref={this.player}\n      />\n    );\n  }\n  \n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.src !== prevProps.src){\n            this.setState({video_url: this.props.src});\n            console.log(this.video.sources);\n        }\n    }\n\n  componentDidMount() {\n    const videoNode = this.player.current;\n    this.video = window.videojs(videoNode,{\n        sources: [{\n            src: this.state.video_url,\n        }],\n        controls: true,\n        fluid:true\n    });\n    console.log(this.props);\n    let { eventON } = this.props;\n    if(eventON){\n        Object.keys(eventON).forEach(item => {\n          this.video.on(item, () => {\n          eventON[item]()\n          });\n        });\n      }\n  }\n  \n  componentWillUnmount() {\n      if (this.video) {\n          this.video.dispose();\n      }\n  }\n}\n\nexport default ITManPlayer;","import ITManPlayer from './ITManPlayer';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nclass Player extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            video_url: '',\n            audio_url: '',\n            loaded: false,\n            fetchcount: 0,\n            }\n        this.fetchVideo = this.fetchVideo.bind(this);\n    }\n\n    fetchVideo(){\n        if (this.state.loaded == true){\n            return;\n        }\n        let video_path = `http://204.44.88.11/mitm/download/${this.props.match.params.ix}/`\n        // console.log(video_path);\n        axios.get(video_path)\n        .then( res => {\n            let div = document.createElement(\"div\")\n            div.innerHTML = res.data\n            let links = div.querySelectorAll('a');\n            for(let i = 0; i < links.length; i++){\n                let link = links[i]\n                let innerURL = link.innerHTML;\n                if (innerURL.includes('audio')) {\n                    this.setState({\n                        audio_url: video_path + innerURL\n                    });\n                }\n                else {\n                    this.setState({\n                        video_url: video_path + links[i].innerHTML,\n                        loaded: true,\n                    }); \n                }\n            }\n            clearInterval(this.state.interrvalId);\n            clearTimeout(this.state.timeoutId);\n        }\n            \n\n        ).catch(err => {\n            console.log(err);\n        })\n\n    }\n\n    videoPlay = () =>{\n        this.ITManPlayer.video.play();\n        this.audioplayer.play();\n        \n      }\n    videoPause= () =>{\n        this.ITManPlayer.video.pause();\n        this.audioplayer.pause();\n    }\n    videoSeek = () =>{\n        this.audioplayer.currentTime = this.ITManPlayer.video.currentTime();\n    }\n    volumechange = () => {\n        this.audioplayer.volume = this.ITManPlayer.video.volume();\n        this.audioplayer.muted = this.ITManPlayer.video.muted();\n    }\n\n    componentDidMount(){\n        // this.fetchVideo()\n        let videoFetchInterval = setInterval(this.fetchVideo, 2000);\n        this.setState({interrvalId: videoFetchInterval});\n        let videoFetchTimeout = setTimeout(()=>{alert(\"Source not found\");}, 30000);\n        this.setState({timeoutId: videoFetchTimeout});\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.state.interrvalId);\n\n    }\n\n    render(){\n        if (this.state.video_url !== \"\" && this.state.audio_url !== \"\")\n        return (\n            <div className=\"wrap\">\n              <ITManPlayer \n              ref={player => (this.ITManPlayer = player)}\n              src = {this.state.video_url}\n              eventON={{\n                pause: () => {\n                  console.log(\"Pause\");\n                  {this.videoPause()}\n                },\n                play: () => {\n                  console.log(\"Play\");\n                  {this.videoPlay()}\n                },\n                seeked: () => {\n                    {this.videoSeek()}\n                    console.log(\"Seeked\");\n                  },\n                volumechange: () => {\n                    {this.volumechange()}\n                    console.log(\"volumechange\");\n                }\n                \n              }}\n              />\n\n              {/* <button onClick={this.videoPlay}>Play</button>\n              <button onClick={this.videoPause}>Pause</button> */}\n              <audio ref={aud =>(this.audioplayer = aud)} src={this.state.audio_url} type=\"audo/mp4\"></audio>\n            </div>\n          );\n\n          else{\n              return <div>\n                  <h1>Loading</h1>\n              </div>\n          }\n    }\n\n}\n\n\nexport default Player","// App.js\n\nimport React, { Component } from 'react';\nimport Player from './Components/Player.jsx'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/video/:ix\"  render={(props) => (<Player key={props.match.params.ix} {...props} />) }/>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}